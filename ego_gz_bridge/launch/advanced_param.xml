<launch>
    <!-- Drone id -->
    <arg name="drone_id"/>
    <arg name="drone_id_ns" value="drone$(arg drone_id)"/>
    <!-- Drone formation params -->
    <arg name="num_drones"/>
    <!-- Map params -->
    <arg name="map_size_x_"/>
    <arg name="map_size_y_"/>
    <arg name="map_size_z_"/>
    <arg name="obj_num_set"/>
    <!-- Sensor input type -->
    <arg name="POSE_TYPE"/>
    <arg name="SENSOR_TYPE"/>
    <arg name="gridmap_frame_id" default="world"/>
    <!-- Subscribed topics -->
    <arg name="odometry_topic"/>
    <arg name="pose_topic"/>
    <arg name="depth_topic"/>
    <arg name="cloud_topic"/>
    <!-- Camera params -->
    <arg name="transform_camera_pose"/>
    <arg name="cx"/>
    <arg name="cy"/>
    <arg name="fx"/>
    <arg name="fy"/>
    <!-- Planner params -->
    <arg name="max_vel"/>
    <arg name="max_acc"/>
    <arg name="max_jer"/>
    <arg name="planning_horizon"/>
    <arg name="use_distinctive_trajs"/>
    <!-- Goal definition  -->
    <arg name="flight_type"/>
    <arg name="num_waypoints"/>
    <!-- <node pkg="ego_planner" name="ego_planner_node" type="ego_planner_node" output="screen" launch-prefix="valgrind"> -->
    <node pkg="ego_planner" name="drone_$(arg drone_id)_ego_planner_node" type="ego_planner_node" output="screen">
        <remap from="~mandatory_stop" to="/mandatory_stop_to_planner"/>
        <remap from="~planning/trajectory" to = "/drone_$(arg drone_id)_planning/trajectory"/>
        <remap from="~planning/data_display" to = "/drone_$(arg drone_id)_planning/data_display"/>
        <remap from="~planning/broadcast_traj_send" to = "/broadcast_traj_from_planner"/>
        <remap from="~planning/broadcast_traj_recv" to = "/broadcast_traj_to_planner"/>
        <remap from="~planning/heartbeat" to = "/drone_$(arg drone_id)_traj_server/heartbeat"/>
        
        <remap from="~odom_world" to="$(arg odometry_topic)"/>
        <!-- //////////////////// -->
        <!-- GridMap params -->
        <!-- //////////////////// -->
        <!-- grid_map/pose_type: Toggle between subscription to
            1 ("grid_map/pose") or 
            2 ("grid_map/odom") 
            for use as camera pose/odom-->
        <param name="~grid_map/pose_type" value="$(arg POSE_TYPE)"/>
        <remap from="~grid_map/odom" to="$(arg odometry_topic)"/>
        <remap from="~grid_map/pose" to = "$(arg pose_topic)"/>

        <!-- grid_map/sensor_type: Toggle between subscription to
            1 ("grid_map/cloud") or 
            2 ("grid_map/depth") 
            for use as camera sensor input -->
        <param name="~grid_map/sensor_type" value="$(arg SENSOR_TYPE)"/>
        <remap from="~grid_map/cloud" to="$(arg cloud_topic)"/>
        <remap from="~grid_map/depth" to = "$(arg depth_topic)"/>

        <!-- If true, camera pose is transformed using a pre-defined translation/rotation matrix -->
        <remap from="~grid_map/transform_camera_pose" to = "$(arg transform_camera_pose)"/>

        <!-- Frame ID to use for publishing (NOT for the input sensor data) -->
        <param name="grid_map/frame_id" value="$(arg gridmap_frame_id)"/>

        <!-- //////////////////// -->
        <!-- EGOReplanFSM params -->
        <!-- //////////////////// -->
        <!-- flight_type: 1 for manual publishing of goals, 2 for preset waypoints, as defined by fsm/waypointX param -->
        <param name="fsm/flight_type" value="$(arg flight_type)" type="int"/>
        <param name="fsm/thresh_replan_time" value="1.0" type="double"/>
        <!-- thresh_no_replan_meter: Replan only if current position and local target exceeds this parameter -->
        <param name="fsm/thresh_no_replan_meter" value="1.0" type="double"/>
        <!-- planning_horizon: Distance to plan for local target -->
        <param name="fsm/planning_horizon" value="$(arg planning_horizon)" type="double"/>
        <!-- emergency_time: always set to 1.5 times grater than sensing horizon-->
        <param name="fsm/emergency_time" value="1.0" type="double"/>
        <!-- realworld_experiment: If set to true, then FSM will not automatically go on to execute trajectories -->
        <param name="fsm/realworld_experiment" value="false"/>
        <param name="fsm/fail_safe" value="true"/>
        <param name="fsm/waypoint_num" value="$(arg num_waypoints)" type="int"/>

        <!-- //////////////////// -->
        <!-- GridMap params -->
        <!-- //////////////////// -->
        <param name="grid_map/resolution" value="0.1" />
        <param name="grid_map/map_size_x" value="$(arg map_size_x_)" />
        <param name="grid_map/map_size_y" value="$(arg map_size_y_)" />
        <param name="grid_map/map_size_z" value="$(arg map_size_z_)" />
        <param name="grid_map/local_update_range_x" value="5.5" />
        <param name="grid_map/local_update_range_y" value="5.5" />
        <param name="grid_map/local_update_range_z" value="4.5" />
        <param name="grid_map/obstacles_inflation" value="0.0" />
        <param name="grid_map/local_map_margin" value="10"/>
        <param name="grid_map/ground_height" value="-0.25"/>
        <!-- camera parameter -->
        <param name="grid_map/cx" value="$(arg cx)"/>
        <param name="grid_map/cy" value="$(arg cy)"/>
        <param name="grid_map/fx" value="$(arg fx)"/>
        <param name="grid_map/fy" value="$(arg fy)"/>
        <!-- depth filter -->
        <param name="grid_map/use_depth_filter" value="true"/>
        <param name="grid_map/depth_filter_tolerance" value="0.15"/>
        <param name="grid_map/depth_filter_maxdist" value="5.0"/>
        <param name="grid_map/depth_filter_mindist" value="0.1"/>
        <param name="grid_map/depth_filter_margin" value="2"/>
        <param name="grid_map/k_depth_scaling_factor" value="1000.0"/>
        <param name="grid_map/skip_pixel" value="2"/>
        <!-- local fusion -->
        <param name="grid_map/p_hit" value="0.65"/>
        <param name="grid_map/p_miss" value="0.35"/>
        <param name="grid_map/p_min" value="0.12"/>
        <param name="grid_map/p_max" value="0.90"/>
        <param name="grid_map/p_occ" value="0.80"/>
        <param name="grid_map/min_ray_length" value="0.1"/>
        <param name="grid_map/max_ray_length" value="4.5"/>
        <param name="grid_map/visualization_truncate_height" value="4.0"/>
        <param name="grid_map/show_occ_time" value="false"/>
        <!-- planner manager -->
        <param name="manager/max_vel" value="$(arg max_vel)" type="double"/>
        <param name="manager/max_acc" value="$(arg max_acc)" type="double"/>
        <param name="manager/polyTraj_piece_length" value="1.5" type="double"/>
        <param name="manager/feasibility_tolerance" value="0.05" type="double"/>
        <param name="manager/planning_horizon" value="$(arg planning_horizon)" type="double"/>
        <param name="manager/use_distinctive_trajs" value="$(arg use_distinctive_trajs)" type="bool"/>
        <param name="manager/drone_id" value="$(arg drone_id)"/>
        <!-- trajectory optimization -->
        <param name="optimization/constraint_points_perPiece" value="5" type="int"/>
        <param name="optimization/weight_obstacle" value="10000.0" type="double"/>
        <param name="optimization/weight_obstacle_soft" value="5000.0" type="double"/>
        <param name="optimization/weight_swarm" value="10000.0" type="double"/>
        <param name="optimization/weight_feasibility" value="10000.0" type="double"/>
        <param name="optimization/weight_sqrvariance" value="10000.0" type="double"/>
        <param name="optimization/weight_time" value="10.0" type="double"/>
        <param name="optimization/weight_formation" value="100" type="double"/>
        <param name="optimization/obstacle_clearance" value="0.1" type="double"/>
        <param name="optimization/obstacle_clearance_soft" value="0.5" type="double"/>
        <param name="optimization/swarm_clearance" value="0.5" type="double"/>
        <param name="optimization/max_vel" value="$(arg max_vel)" type="double"/>
        <param name="optimization/max_acc" value="$(arg max_acc)" type="double"/>
        <param name="optimization/max_jer" value="$(arg max_jer)" type="double"/>
        <param name="optimization/record_opt" value="true"/>
        <!-- formation: Affects the target position of the drone relative to the goal-->
        <param name="formation/num" value="$(arg num_drones)"/>
        <rosparam param="formation/start">[-32,0,1]</rosparam>
        <rosparam param="formation/drone0">[  1, -0.5, 0]</rosparam>
        <rosparam param="formation/drone1">[  1,  0.5, 0]</rosparam>
        <rosparam param="formation/drone2">[  0, -1.0, 0]</rosparam>
        <rosparam param="formation/drone3">[  0,  0.0, 0]</rosparam>
        <rosparam param="formation/drone4">[  0,  1.0, 0]</rosparam>
        <rosparam param="formation/drone5">[ -1, -0.5, 0]</rosparam>
        <rosparam param="formation/drone6">[ -1,  0.5, 0]</rosparam>
    </node>
</launch>
